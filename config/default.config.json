{
	"$schema": "http://www.freedatamap.com/jsonConfigSchema/schema#",
    "config": {
        "root": null,
        "styles": [{
            "name": "root",
            "level": 0,
            "arrow": true,
            "arc": false,
            "rNod": 10,
            "link": 130,
            "color": "#1f77b4",
            "attrPaneCol": "#aec7e8",
            "txtFontSize": 14,
            "backgroundImage": null,
            "backgroundImage.dm_props": {
                "name": "backgroundImage",
                "visible": true,
                "label": "backgroundImage",
                "type": "image",
                "edit": false
            }
        }, {
            "name": "level 1",
            "level": 1,
            "arrow": true,
            "arc": false,
            "rNod": 10,
            "link": 130,
            "txtFontSize": 13,
            "color": "#1f77b4",
            "attrPaneCol": "#aec7e8"
        }, {
            "name": "level 2",
            "level": 2,
            "arrow": true,
            "arc": false,
            "rNod": 9,
            "link": 130,
            "txtFontSize": 12,
            "color": "#ff7f0e",
            "attrPaneCol": "#ffbb78"
        }, {
            "name": "level 3",
            "level": 3,
            "arrow": true,
            "arc": false,
            "rNod": 9,
            "link": 130,
            "txtFontSize": 12,
            "color": "#2ca02c",
            "attrPaneCol": "#98df8a"
        }, {
            "name": "level 4",
            "level": 4,
            "arrow": true,
            "arc": false,
            "rNod": 8,
            "link": 130,
            "txtFontSize": 12,
            "color": "#d62728",
            "attrPaneCol": "#ff9896"
        }, {
            "name": "level 5",
            "level": 5,
            "arrow": true,
            "arc": false,
            "rNod": 8,
            "link": 130,
            "txtFontSize": 12,
            "color": "#9467bd",
            "attrPaneCol": "#c5b0d5"
        }, {
            "name": "level 6",
            "level": 6,
            "arrow": true,
            "arc": false,
            "rNod": 7,
            "link": 130,
            "txtFontSize": 11,
            "color": "#e377c2",
            "attrPaneCol": "#f7b6d2"
        }, {
            "name": "level 7",
            "level": 7,
            "arrow": true,
            "arc": false,
            "rNod": 7,
            "link": 130,
            "txtFontSize": 11,
            "color": "#bcbd22",
            "attrPaneCol": "#dbdb8d"
        }, {
            "name": "level 8",
            "level": 8,
            "arrow": true,
            "arc": false,
            "rNod": 6,
            "link": 130,
            "txtFontSize": 11,
            "color": "#17becf",
            "attrPaneCol": "#9edae5"
        }, {
            "name": "level 9",
            "level": 9,
            "arrow": true,
            "arc": false,
            "rNod": 6,
            "link": 130,
            "txtFontSize": 11,
            "color": "#6b6ecf",
            "attrPaneCol": "#9c9ede"
        }, {
            "name": "level 10",
            "level": 10,
            "arrow": true,
            "arc": false,
            "rNod": 5,
            "link": 130,
            "txtFontSize": 11,
            "color": "#1f77b4",
            "attrPaneCol": "#aec7e8"
        }, {
            "name": "level 11",
            "level": 11,
            "arrow": true,
            "arc": false,
            "rNod": 5,
            "link": 130,
            "txtFontSize": 11,
            "color": "#ff7f0e",
            "attrPaneCol": "#ffbb78"
        }, {
            "name": "level 12",
            "level": 12,
            "arrow": true,
            "arc": false,
            "rNod": 5,
            "link": 130,
            "txtFontSize": 11,
            "color": "#2ca02c",
            "attrPaneCol": "#98df8a"
        }, {
            "name": "level 13",
            "level": 13,
            "arrow": true,
            "arc": false,
            "rNod": 5,
            "link": 130,
            "txtFontSize": 11,
            "color": "#d62728",
            "attrPaneCol": "#ff9896"
        }, {
            "name": "level 14",
            "level": 14,
            "arrow": true,
            "arc": false,
            "rNod": 5,
            "link": 130,
            "color": "#9467bd",
            "attrPaneCol": "#c5b0d5"
        }, {
            "name": "level 15",
            "level": 15,
            "arrow": true,
            "arc": false,
            "rNod": 4,
            "link": 130,
            "txtFontSize": 11,
            "color": "#e377c2",
            "attrPaneCol": "#f7b6d2"
        }, {
            "name": "level 16",
            "level": 16,
            "arrow": true,
            "arc": false,
            "rNod": 4,
            "link": 130,
            "txtFontSize": 11,
            "color": "#bcbd22",
            "attrPaneCol": "#dbdb8d"
        }, {
            "name": "level 17",
            "level": 17,
            "arrow": true,
            "arc": false,
            "rNod": 4,
            "link": 130,
            "txtFontSize": 11,
            "color": "#17becf",
            "attrPaneCol": "#9edae5"
        }, {
            "name": "level 18",
            "level": 18,
            "arrow": true,
            "arc": false,
            "rNod": 4,
            "link": 130,
            "txtFontSize": 11,
            "color": "#6b6ecf",
            "attrPaneCol": "#9c9ede"
        }, {
            "name": "leaf",
            "level": 19,
            "arrow": false,
            "arc": true,
            "rNod": 4,
            "link": 95,
            "txtFontSize": 10,
            "color": "#c7c7c7",
            "attrPaneCol": "#c7c7c7",
            "txtCol": "#7f7f7f"
        }],
        "center": null,
        "depth": 2,
        "setColumns2node": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
        "sort": "items",
        "sortDescendant": true,
        "columns": [],
        "aggregate": [
            {
                "name": "items",
                "value": "var output = 1 ;\nif(node.children) {\n    var i = node.children.length - 1 ;\n    output = 0 ;\n    for(; i>=0; i--) {\n        output += node.children[i].rawNode[propName] ;\n    }\n}\nreturn output ;",
                "funcDropdown": "count leaves",
                "execAfterChildrenVisit": true,
                "onlyLeaves": true
            }
        ],
        "columnNames": [],
        "displayProps": [{
            "name": "root",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 1",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 2",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 3",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 4",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 5",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 6",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 7",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 8",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 9",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 10",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 11",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 12",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 13",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 14",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 15",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 16",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 17",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "level 18",
            "children": [{
                "name": "items",
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            },
            {
                "name": "itemsPie",
                "label": "Items",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "item(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;\nvar levelMin = dm_Tools.getDepth(node) ;\nvar doIt = function(node) {\n    if (!output) {\n        output = [] ;\n    }\n    elt = {} ;\n    output.push(elt) ;\n    elt.value = node.rawNode['items'] ;\n    elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;\n    elt.unit = 'item(s)' ;\n};\nvar parentLevel = dm_Tools.getDepth(node) ;\nvar depth = 1 ;\nvar dive = function(node) {\n    if (node) {\n        if (dm_Tools.getDepth(node) == parentLevel + depth) {\n            doIt(node);\n        } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {\n            node.children.forEach(function(child) {\n                dive(child);\n            });\n        }\n    }\n} ;\ndive(node);\nreturn output;"
            }],
            "edit": false,
            "visible": false
        }, {
            "name": "leaf",
            "children": [],
            "edit": true,
            "visible": true
        }]
    }
}